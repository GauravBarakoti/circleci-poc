version: 2.1
# The version field is intended to be used in order to issue warnings for deprecation or breaking changes.
orbs:
  slack: circleci/slack@4.12.5
jobs:
# A Workflow is comprised of one or more uniquely named jobs.
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "New request",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*CircleCI:*\nTriggered"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Click here to check:*\n<https://app.circleci.com/pipelines/circleci/K8vHSQovhLv8kMBfzEcXGd/H5KJv41WutZFoxziJ3do2|Pipeline>"
                    }
                  ]
                }
              ]
            }
          channel: 'C05UV56J30F'
          mentions: '@GauravBarakoti'
  test-deployment:
  # Name for a job, can be anything
    machine: true
    # The virtual machine image to use. 
    resource_class: k8vhsqovhlv8kmbfzecxgd/docker
    # The resource_class feature allows you to configure CPU and RAM resources for each job.
    working_directory: ~/my-app
    # Not Required, In which directory to run the steps. Will be interpreted as an absolute path. (default: .)
    steps:
    # A list of steps to be performed.
      - checkout
      # the checkout step will checkout project source code into the job’s working_directory
      - run: 
          name: Build Docker Image
          command: docker build -t mysampleimage:${CIRCLE_BUILD_NUM} .
          # fix this with image tag and keep 2 previous version of the image
      - run: sudo systemctl reload apache2
      - run:
          name: Stop and Remove Container first and launch new container
          command: |
            if [[ "$(docker ps --filter name=first -aq)" != "" ]]; then
              docker container stop $(docker ps --filter name=first -aq)
              sleep 2
            else
              docker container run --rm --name first -d -p 8081:5000 mysampleimage:${CIRCLE_BUILD_NUM}
            fi
      - run: sudo systemctl reload apache2
      - run:
          name: Waiting to stable the app
          command: sleep 8
      - run:
          name: Stop and Remove Container Second and launch new container
          command: |
            if [[ "$(docker ps --filter name=second -aq)" != "" ]]; then
              docker container stop $(docker ps --filter name=second -aq)
              sleep 2
            else
              docker container run --rm --name second -d -p 8082:5000 mysampleimage:${CIRCLE_BUILD_NUM}
            fi
      - run: sudo systemctl reload apache2
      - run:
      # Used for invoking all command-line programs
          name: Remove previous Image If Any keep last 2 version
          # Command to run via the shell
          command: |
            if [[ "$(docker images mysampleimage:`expr ${CIRCLE_BUILD_NUM} - 3 ` -q)" != "" ]]; then
              docker image rm $(docker images mysampleimage:`expr ${CIRCLE_BUILD_NUM} - 3 ` -q)
            fi
      - run: echo "Hello!"
      - slack/notify:
          event: fail
          mentions: '@GauravBarakoti'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          mentions: '@GauravBarakoti'
  prod-deployment:
    machine: true
    resource_class: k8vhsqovhlv8kmbfzecxgd/redhat
    working_directory: ~/my-app
    steps:
      # - checkout
      # # the checkout step will checkout project source code into the job’s working_directory
      # - run: 
      #     name: Build Docker Image
      #     command: docker build -t mysampleimage:${CIRCLE_BUILD_NUM} .
      #     # fix this with image tag and keep 2 previous version of the image
      # - run: sudo systemctl reload httpd
      # - run:
      #     name: Stop and Remove Container first and launch new coantianer
      #     command: |
      #       if [[ "$(docker ps --filter name=first -aq)" != "" ]]; then
      #         docker container stop $(docker ps --filter name=first -aq)
      #         sleep 2
      #       else
      #         docker container run --rm --name first -d -p 8081:5000 mysampleimage:${CIRCLE_BUILD_NUM}
      #       fi

      # - run: sudo systemctl reload httpd
      # - run:
      #     name: Waiting to stable the app
      #     command: sleep 8
      # - run:
      #     name: Stop and Remove Container Second and launch new container
      #     command: |
      #       if [[ "$(docker ps --filter name=second -aq)" != "" ]]; then
      #         docker container stop $(docker ps --filter name=second -aq)
      #         sleep 2
      #       else
      #         docker container run --rm --name second -d -p 8082:5000 mysampleimage:${CIRCLE_BUILD_NUM}
      #       fi
      # - run: sudo systemctl reload httpd
      # - run:
      # # Used for invoking all command-line programs
      #     name: Remove previous Image If Any keep last 2 version
      #     # Command to run via the shell
      #     command: |
      #       if [[ "$(docker images mysampleimage:`expr ${CIRCLE_BUILD_NUM} - 3 ` -q)" != "" ]]; then
      #         docker image rm $(docker images mysampleimage:`expr ${CIRCLE_BUILD_NUM} - 3 ` -q)
      #       fi
      - run: echo "Hello!"
      - slack/notify:
          event: fail
          mentions: '@GauravBarakoti'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          mentions: '@GauravBarakoti'

workflows:
# Used for orchestrating all jobs.
  version: 2
  # The Workflows version field is used to issue warnings for deprecation or breaking changes. Required if config version is 2
  build-deploy:
    jobs:
    # A job name that exists in your config.yml
      - notify
      - test-deployment
      - slack/on-hold:
          requires:
            - test-deployment
      - pause_workflow:
          requires:
            - test-deployment
            - slack/on-hold
          type: approval
      - prod-deployment:
          requires:
            - pause_workflow